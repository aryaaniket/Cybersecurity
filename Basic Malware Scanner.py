import os
import hashlib
import time
import psutil
import socket
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication

EXTENSIONS = ['.exe', '.dll', '.doc', '.xls']

DIRECTORIES = [os.path.join(os.environ['USERPROFILE'], 'Desktop'),
               os.path.join(os.environ['USERPROFILE'], 'Documents')]

MALWARE_SIGNATURES = set()

PROCESS_INFO = {}

def scan_file(filepath):
	try:
		with open(filepath, 'rb') as f:
			content = f.read()
      md5 = hashlib.md5(content).hexdigest()
            
      if md5 in MALWARE_SIGNATURES:
				print(f'Potential malware detected in file {filepath}!')
        move_to_quarantine(filepath)
        send_alert_email(f'Malware detected in file {filepath}!')
                
      if check_heuristics(content):
				print(f'Suspicious behavior detected in file {filepath}!')
        move_to_quarantine(filepath)
        send_alert_email(f'Suspicious behavior detected in file {filepath}!')
                
	except:
		pass

# to check a file for suspicious behavior
def check_heuristics(content):
	#Check for any suspicious keyword
	keywords = ['hack', 'crack', 'keygen']
  for keyword in keywords:
		if keyword.encode() in content:
			return True
  # Check if the file size is unusually large or small
  filesize = len(content)
  if filesize < 1024 or filesize > 1048576:
		return True
        
  # Check if the file contains any suspicious headers
  headers = [b'MZ', b'PK', b'%PDF-', b'\x7fELF']
  header = content[:4]
  if header not in headers:
		return True
        
  # Check if the file contains any suspicious code patterns
  patterns = [b'eval(', b'exec(', b'os.system(']
  for pattern in patterns:
		if pattern in content:
			return True
		
	return False

#to monitor running processes
def monitor_processes():
	processes = []
    for process in psutil.process_iter(['pid', 'name']):
			processes.append((process.info['pid'], process.info['name']))
    
    
    for pid, name in processes:
			if pid not in PROCESS_INFO:
				PROCESS_INFO[pid] = {'name': name, 'start_time': time.time()}
        print(f'New process {name} (PID {pid}) started.')
        send_alert_email(f'New process {name} (PID {pid}) started.')
    
    
    for pid in PROCESS_INFO.copy():
      if pid not in [p[0] for p in processes]:
				name = PROCESS_INFO[pid]['name']
        duration = time.time() - PROCESS_INFO[pid]['start_time']
        print(f'Process {name} (PID {pid}) stopped after {duration} seconds.')
   	
    
